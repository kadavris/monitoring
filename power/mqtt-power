#!/usr/bin/env python3
"""
 This script produces reports on electrical power and push it into mqtt.
 repo is in github.com/kadavris
 assumed topic structure:
     power
         <dev_id> - {"model":"...", "errors":"...", "attribute1":"..."...}
            state_topic... - one-line state message
            updated - json: { "date":"human-readable date", timestamp:UNIXTS }
"""
import argparse
import configparser
import os
import os.path
import re
import signal
import socket
import sys
import shlex
import subprocess
import time


#############################################################
def handle_termination(signum, frame) -> None:
    """
    Will (safely) handle termination. Stopping sender agend on its rails.
    :param signum: unused
    :param frame: unused
    :return: None
    """
    if ARGS.debug:
        print("! signal caught. exiting.", file=sys.stderr)

    if Sender:
        Sender.terminate()

    sys.exit(0)


#############################################################
def load_config(c_file: str) -> {}:
    """
    Will load configuration file, checking for problems beforehand
    :param c_file: path to config file
    :return: None
    """
    global ARGS, CONFIG, GLOBAL_CONFIG

    file = c_file

    if not os.path.exists(file):
        if re.search(r'/', file):
            print("! Can't open config: ", file, file=sys.stderr)
            sys.exit(1)

        file = os.path.dirname(sys.argv[0]) + '/' + c_file

        if not os.path.exists(file):
            file = '/etc/smarthome/reporters/' + c_file

    if ARGS.debug:
        print("+ Loading config:", file)

    GLOBAL_CONFIG = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
    GLOBAL_CONFIG.read(file)
    return GLOBAL_CONFIG['power']


########################################
def spawn_sender() -> None:
    """
    Will spawn sender process, checking for various problems
    :return: None
    """
    global ARGS, CONFIG, Sender

    if ARGS.debug:
        print("+ Spawning sender process:", CONFIG['sender'], file=sys.stderr)

    # default bufsize may gobble a whole loop of data and do nothing till the next
    Sender = subprocess.Popen(shlex.split(CONFIG['sender']), bufsize=1,
                              stdin=subprocess.PIPE,
                              stdout=(None if ARGS.debug or CONFIG['sender'].find('--debug')
                                      else subprocess.DEVNULL),
                              stderr=(None if ARGS.debug or CONFIG['sender'].find('--debug')
                                      else subprocess.DEVNULL),
                              text=True)

    if not Sender:
        print('? ERROR running ', CONFIG['sender'], file=sys.stderr)
        sys.exit(1)

    if Sender.poll():  # poll() return None if process is still there
        print('? ERROR with running ', Sender.args, ": exited ",
              ("abnormally" if Sender.returncode > 0 else "W/O error"),
              "with rc:", Sender.returncode, file=sys.stderr)
        sys.exit(1)


########################################
def send_message(*msg) -> None:
    """
    Will send new message to the MQTT using sender process connection
    :param msg: list of message parts to send
    :return: None
    """
    global ARGS, Sender

    try_number = 1
    while True:
        if Sender.poll():  # check if it is still alive (not None)
            spawn_sender()

        try:
            if ARGS.debug:
                print('> Send: ', msg)

            Sender.stdin.write(''.join(msg))
        except:
            if ARGS.debug:
                exc_type, exc_val, traceback = sys.exc_info()
                if exc_val:
                    exc_val = ','.join(exc_val.args)
                else:
                    exc_val = 'UNKNOWN REASON'
                print("! Sending failed (", exc_val, ")", file=sys.stderr)

            try_number += 1
            if try_number > 3:
                try_number = 1
                print("!!! Respawning.", file=sys.stderr)
                spawn_sender()
        else:
            break

        time.sleep(3.0)


########################################
def update_stats(device: str, prefix: str, time_value: float, voltage: float, freq: float) -> None:
    """
    Will update stats[ device ] with minute, hourly or daily values depending on prefix.
    Currently, it sums values for simple mean calculation
    :param device: str: device path
    :param prefix: str: 'm'/'h'/'d'
    :param time_value: float: timestamp
    :param voltage: float
    :param freq: float: frequency
    :return: None
    """
    global Stats

    if Stats[device][prefix + 'start'] != time_value:  # new time period?
        # making old mean the 1st value of this period
        Stats[device][prefix + 'v'] = Stats[device][prefix + '_v_mean'] + voltage
        Stats[device][prefix + 'f'] = Stats[device][prefix + '_f_mean'] + freq
        Stats[device][prefix + 'samples'] = 2
        Stats[device][prefix + 'start'] = time_value
    else:
        Stats[device][prefix + 'samples'] += 1
        Stats[device][prefix + 'v'] += voltage
        Stats[device][prefix + 'f'] += freq

        Stats[device][prefix + '_v_mean'] = \
            Stats[device][prefix + 'v'] // Stats[device][prefix + 'samples']
        Stats[device][prefix + '_f_mean'] = \
            Stats[device][prefix + 'f'] // Stats[device][prefix + 'samples']


########################################
def get_model_specific_config(device: str, keyword: str, default: str = "") -> str:
    """
    Return the value of model-specific setting from config.
    :param device: str. NUT ID of UPS device
    :param keyword: str. Attribute/keyword name
    :param default: str. Default value to return if not found
    :return: str. The value
    """
    global CONFIG, GLOBAL_CONFIG

    specific_section = "power." + device
    if specific_section in GLOBAL_CONFIG \
            and keyword in GLOBAL_CONFIG[specific_section]:
        return GLOBAL_CONFIG[specific_section][keyword]

    if keyword in CONFIG:
        return CONFIG[keyword]

    return default


########################################
def get_upsc_output(device: str) -> dict:
    """
    Collects data from upsc output for given device.
    :param device:
    :return: dict("model":"manufacturer model", "data":dict(attribute:val))
    """
    global ARGS, CONFIG, Stats

    to_return = {"model": "", "errors": ''}

    # initializing the list of minimal attributes that we needed (note '.' replaced by '_')
    upsc_data_needed = [
        'device_mfr',  # device.mfr: EATON
        'device_model',  # device.model: 5E 1500i
        'device_type',  # device.type: ups
        'ups_status',  # ups.status: OL
    ]

    # adding user-defined properties
    if 'one_to_one' in CONFIG:
        for pair in CONFIG.get('one_to_one').split():
            oto_attr, oto_topic = pair.split(':')
            upsc_data_needed.append(oto_attr)

    if 'bulk_report' in CONFIG:
        to_return['bulk_report'] = CONFIG.get('bulk_report').split()
        upsc_data_needed += to_return['bulk_report']

    to_return['need'] = upsc_data_needed  # indicating what we intended to collect here
    to_return['data'] = {}  # attributes values will be here

    upsc_bin = ['upsc', device]
    if 'upsc_binary' in CONFIG:
        upsc_bin = CONFIG.get('upsc_binary').replace('$device', device).split()

    upsc = subprocess.Popen(upsc_bin,
                            stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
                            stderr=(None if ARGS.debug else subprocess.DEVNULL), text=True)

    if upsc.poll():
        if upsc.returncode > 0:
            to_return["errors"] = '"upsc error":"ended with rc: ' + str(upsc.returncode) + '"'
            print(to_return["errors"])
        return to_return

    out, err = upsc.communicate()  # communicate() will return all output at once

    if err and (err != ''):
        to_return["errors"] = '"upsc error":"' + err + "'"
        print(to_return["errors"])
        return to_return

    for report_line in out.splitlines():
        # attributes array?
        rm = re.match(r'([\w.]+):\s+(.+)', report_line)
        if not rm:
            continue

        attribute_name = rm.group(1).replace('.', '_')
        value = rm.group(2).strip()

        if attribute_name not in upsc_data_needed:
            continue

        to_return['data'][attribute_name] = value

    # do some stats
    try:
        t = time.localtime()

        v = float(to_return['data']['input_voltage'])
        f = float(to_return['data']['input_frequency']) \
            if 'input_frequency' in to_return['data'] else 0
        if f == 0:
            f = float(to_return['data']['output_frequency']) \
                if 'output_frequency' in to_return['data'] else 0

        if device not in Stats:  # init
            Stats[device] = {
                'mstart': 0, 'm_v_mean': v, 'mv': v,  # minute
                'mf': f, 'm_f_mean': f, 'msamples': 1,
                'hstart': 0, 'h_v_mean': v, 'hv': v,  # hour
                'hf': f, 'h_f_mean': f, 'hsamples': 1,
                'dstart': 0, 'd_v_mean': v, 'dv': v,  # day
                'df': f, 'd_f_mean': f, 'dsamples': 1
            }

        update_stats(device, 'm', t.tm_min, v, f)
        update_stats(device, 'h', t.tm_hour, v, f)
        update_stats(device, 'd', t.tm_mday, v, f)

        to_return['data']['voltage_mean_minute'] = Stats[device]['m_v_mean']
        to_return['data']['frequency_mean_minute'] = Stats[device]['m_f_mean']

        to_return['data']['voltage_mean_hour'] = Stats[device]['h_v_mean']
        to_return['data']['frequency_mean_hour'] = Stats[device]['h_f_mean']

        to_return['data']['voltage_mean_day'] = Stats[device]['d_v_mean']
        to_return['data']['frequency_mean_day'] = Stats[device]['d_f_mean']
    except:
        pass

    # fill in specials:
    to_return['model'] = "Model: "
    # device.mfr: EATON. Some UPS report empty string here
    if 'device_mfr' in to_return['data'] and to_return['data']['device_mfr'] != "":
        to_return['model'] += to_return['data']['device_mfr']
    else:
        to_return['model'] += get_model_specific_config(device, ".mfr", "UNSPECIFIED")

    # device.model: 5E 1500i
    if 'device_model' in to_return['data'] and to_return['data']['device_model']:
        to_return['model'] += ' ' + to_return['data']['device_model']
    else:
        to_return['model'] += ' ' + get_model_specific_config(device, ".model", "")

    return to_return


########################################
def check_nut() -> None:
    """
    Will analyze upsc output and send the data to MQTT.
    Default function to run on invocation of this script.
    :return: None
    """
    global ARGS, CONFIG, Log_items, Sender, Stats

    if 'devices' in CONFIG:
        dev_list = CONFIG['devices'].split()
    else:
        # TODO: don't know if this even will work today
        if ARGS.debug:
            print('requesting the list of devices from upsc')

        upsc = subprocess.Popen(['upsc', '-l'],
                                stdin=subprocess.DEVNULL, stdout=subprocess.PIPE,
                                stderr=(None if ARGS.debug else subprocess.DEVNULL), text=True)
        dev_list = upsc.communicate()[0].splitlines()

    for device in dev_list:
        dev_topic = CONFIG['device_topic'].replace('$device', device)

        if ARGS.debug:
            print('device:', device, 'topic:', dev_topic)

        upsc_data = get_upsc_output(device)

        # we will count the configured checks to report if none were enabled actually
        checks_run = 0
        checks_with_errors = 0

        # this will be sent last and be updated by other analysis code on the way
        bulk_msg = '{ "model":"' + upsc_data['model'] + '", "errors":"' + upsc_data["errors"] + '"'

        for k in upsc_data['data']:
            bulk_msg += ', "' + k + '":"' + str(upsc_data['data'][k]) + '"'

        bulk_msg += ' }'

        # --------------------------------
        if 'log_samples' in CONFIG:
            log_name = CONFIG['log_samples'].replace('$device', device)
            try:
                time_str = time.strftime(r'%Y-%m-%d %H:%M:%S')

                line = ''
                if len(Log_items) > 0:  # subset of data requested
                    for k in Log_items:
                        if k and k not in upsc_data['data']:
                            line += time_str + ' WARNING! upsc does not provide item "' + k + '"\n'
                            Log_items[Log_items.index(k)] = None

                    line += time_str + ' { "date":"' + time_str + '"'

                    for k in Log_items:
                        if k:
                            line += ', "' + k + '":"' + str(upsc_data['data'][k]) + '"'

                    line += ' }\n'

                else:  # just log anything that we've got
                    line = time_str + bulk_msg.replace('\n', ' ') + '\n'

                open(log_name, mode='a').writelines(line)

            except:
                del CONFIG['log_samples']
                print('! Error writing log file: ', log_name, ':',
                      sys.exc_info()[0], file=sys.stderr)
        # if 'log_samples' in config

        # is it time to post new data?
        next_rep = device + '_next_report'

        if (next_rep in Stats) and Stats[next_rep] > time.time():  # too soon to report?
            continue

        Stats[next_rep] = time.time() + float(CONFIG['report_interval'])

        # quick post one-to-one data
        if 'one_to_one' in CONFIG:
            for pair in CONFIG.get('one_to_one').split():
                oto_attr, oto_topic = pair.split(':')
                checks_run += 1

                if oto_attr in upsc_data['data']:
                    msg = upsc_data['data'][oto_attr]
                else:
                    msg = 'NO DATA'
                    checks_with_errors += 1

                send_message('{ "publish":"', msg, '", "retain":true, "topics":[ "',
                             dev_topic, '/', oto_topic, '" ] }\n')

        # finally sending general status message
        if upsc_data['errors'] != '' or ('ups_status' not in upsc_data['data']):
            msg = upsc_data['errors']
            checks_with_errors += 1
        else:
            msg = upsc_data['data']['ups_status']
        checks_run += 1

        send_message('{ "publish":"', msg, '", "retain":true, "topics":[ "',
                     dev_topic, '/', CONFIG['state_topic'], '" ] }\n')

        # sending time stats
        send_message('{ "publish":"', Dates_json, '", "retain":true, "topics":[ "',
                     dev_topic, '/', CONFIG['updated_topic'], '" ] }\n')

        # doing bulk report message. we'll use 'mpublish' posting method, so no quoting is needed

        stop_word = '25@5h256h256H'
        bulk_msg = bulk_msg[:-1] + ', "checks run":' + str(checks_run) + \
            ', "checks with errors":' + str(checks_with_errors) + ' }'

        send_message('{ "mpublish":"', stop_word, '", "retain":true, "topics":[ "',
                     dev_topic, '" ] }\n', bulk_msg, stop_word, "\n")


# end loop: for device in os.listdir( '/dev' ):


####################################################
# MAIN
config_path = '/etc/smarthome/reporters/reporters.ini'  # default

parser = argparse.ArgumentParser(
    description='Collecting electrical power info and passing it to mqtt agent')
parser.add_argument('-c', '--config', dest='config_path', action='store', default=config_path,
                    help='path to non-default (' + config_path + ') config file')
parser.add_argument('-d', '--debug', dest='debug', action='store_true', default=False,
                    help='debug mode')
parser.add_argument('-l', '--loop', dest='loop', action='store', type=int, default=-1,
                    help='Loop forever, sleeping <int> seconds between passes. ' +
                         'If > 0 then overrides config "sample_interval" settings')
parser.add_argument('action', nargs='?', default='', help='non-default action name to run')

ARGS = parser.parse_args()

CONFIG = load_config(ARGS.config_path)

# mqtt sender script tend to hang up (why no SIGPIPE on stdin read?) if we exit hastily.
# Try to avoid this.
signal.signal(signal.SIGINT, handle_termination)
signal.signal(signal.SIGTERM, handle_termination)

hba = socket.gethostbyaddr(socket.gethostname())
hostname = re.sub(r'\..+', '', hba[0])

spawn_sender()

if ARGS.debug:
    if not Sender:
        sys.exit(1)

    print('sender:', Sender.args)

Dates_json = ''
queue = []
Stats = {}

# pre-caching the list of items to put in the log
Log_items = []
if 'log_items' in CONFIG:
    Log_items = CONFIG.get('log_items').split()

##################################
# set necessary defaults
if 'sample_interval' not in CONFIG:
    if ARGS.loop > 0:
        CONFIG['sample_interval'] = str(ARGS.loop)
    else:
        CONFIG['sample_interval'] = '30'  # seconds

if 'report_interval' not in CONFIG:
    if ARGS.loop > 0:
        CONFIG['report_interval'] = str(ARGS.loop)
    else:
        CONFIG['report_interval'] = CONFIG['sample_interval']

##################################
# Which functions should we run. default is check_nut
if ARGS.action != '':
    queue.append(ARGS.action)
else:
    queue = [check_nut]

while True:  # main loop
    Dates_json = '{ "date":"' + time.ctime() + '", "timestamp":' + str(int(time.time())) + ' }'
    Dates_json = Dates_json.replace(r'"', r'\"')

    for func in queue:
        func()

    if int(CONFIG['sample_interval']) <= 0:
        break

    time.sleep(int(CONFIG['sample_interval']))

try:
    Sender.communicate(input='\n\n{ "cmd":"exit" }\n')

    Sender.wait(timeout=15.0)
except:
    pass

Sender.terminate()

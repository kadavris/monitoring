#!/usr/bin/env python3
"""
This script produces reports on storage health (S.M.A.R.T) and passes it to mqtt publishing agent.
Utilizes 2 kinds of data collecting: nagios plugin and smartmontools
The MQTT hierarchy tree is pictured below. See .ini file for options with actual names
<root_topic> - root topic. nothing goes here
    <sd?> - named after /dev/sd? block device name.
        JSON serialized, high-level analysis of drive state going here:
        {
             these may go from smart or nagios plugin:
             "status":"OK or error message...",
             "checks run":count, - the number of different check procedure we ran (smart/nagios plugin/etc.)
             "checks with errors":count - and how many are failed
             these are from smart only:
             "model":"device model",
             "serial":"device S/N",
             "id":"device model + S/N. must be unique anyway",
             "type":"device type: HDD or SSD now"
             "tests done":count, - how many smart test are in log
             "tests failed":count, - and how many failed
        }
        <attributes_topic> - May contain JSON packed attributes here if topic defined in .ini
            id:{ "name":"...", "value":"...", "raw":"..." }
        <power_on_time> - lifetime hours (smart)
        <temperature> - degrees of C (smart)
        <error_log_topic> - JSON of raw error log entries (smart)
            { lifetime_hours:"error_description", ...  }
        <state_topic> - nagios-like: "OK", "WARNING", "CRITICAL"
        <raw_smart_topic> - unprocessed smart data
        <tests_log_topic> - JSON of raw tests log entries (smart)
            { lifetime_hours:"test status", ...  }
        <updated_topic> - When this device hierarchy was last updated:
            { "date":"Human readable date/time", "timestamp":UNIX_timestamp }

repo is in github.com/kadavris
Copyright by Andrej Pakhutin (pakhutin <at> gmail)
Provided under the terms of the GNU General Public License version 2 (GPL-2.0)
"""
import argparse
import configparser
import json
import os
import os.path
import re
import select
import shlex
import signal
import socket
import subprocess
import sys
import time


#############################################################
def handle_termination(*_) -> None:
    """
    Tries to gracefully exit in case of problems

    param signum: UNUSED
    param frame: UNUSED
    :return: None
    """
    if sender:
        sender.terminate()

    sys.exit(0)


#############################################################
def load_config(c_file: str, default_path: str) -> None:
    """
    Loads .ini and may do some initializing of defaults

    :param c_file: str. Path to .ini file
    :param default_path: str. Last resort to find .ini
    :return: None
    """
    global args, config_full

    file = c_file

    if not os.path.exists(file):
        if file.find('/'):
            print("! Can't open config: " + file, file=sys.stderr)
            sys.exit(1)

        file = os.path.dirname(sys.argv[0]) + '/' + c_file

        if not os.path.exists(file):
            file = default_path + "/" + c_file

    if not os.path.exists(file):
        print("! Can't find your config anywhere", file=sys.stderr)
        sys.exit(1)

    if args.debug:
        print("+ Loading config:", file, file=sys.stderr)

    config_full = configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())
    config_full.read(file)

    if 'storage' not in config_full:
        print("! Config is missing 'storage' section!", file=sys.stderr)
        sys.exit(1)


########################################
def spawn_sender() -> None:
    """
    (Re)spawns process that actually sends mqtt messages to server

    :return: None
    """
    global args, config, sender

    if args.debug:
        print("+ Spawning sender process:", config['sender'], file=sys.stderr)

    sender=subprocess.Popen(config['sender'], bufsize=1,
                              # default buf size may gobble a whole loop of data and do nothing till the next
                              stdin=subprocess.PIPE,
                              stdout=None if args.debug or config['sender'].find('--debug')
                              else subprocess.STDOUT,
                              stderr=None if args.debug or config['sender'].find('--debug')
                              else subprocess.DEVNULL,
                              shell=False, text=True)

    if sender.poll():  # poll() return None if process is still there
        print('? ERROR with running ', sender.args, ": exited ",
              ("abnormally" if sender.returncode > 0 else "W/O error code"),
              "with rc:", sender.returncode, file=sys.stderr)
        sys.exit(1)

    time.sleep(3.0)  # trying to debug some strange re-connection issues


########################################
def send_message_raw(msg: str) -> None:
    """
    Sends another message to the spawned mqtt agent

    :param msg: string. sent as is
    :return: None
    """
    global sender

    try_number = 1
    while True:
        if sender.poll():  # check if it is still alive (not None)
            spawn_sender()

        if args.debug:
            print('> Sending:', msg)

        try:
            sender.stdin.write(msg)
            sender.stdin.write("\n")
        except:
            if args.debug:
                exc_type, exc_val, traceback = sys.exc_info()
                # if exc_val:
                #     exc_val = ','.join(exc_val.args)
                # else:
                #     exc_val = 'UNKNOWN REASON'
                print("! Sending failed (", exc_val, ")", file=sys.stderr)

            try_number += 1
            if try_number > 3:
                try_number = 1
                print("!!! Respawning.", file=sys.stderr)
                spawn_sender()
        else:
            break

        # waiting for 3 sec for answer
        if sender.stdout:
            answer = ''
            # gobble previous answers before checking last RC
            while select.select([sender.stdout], [None], [None], 3)[0][0] > 0:
                answer = sender.stdout.readline()

                if args.debug:
                    print('< Answer:', answer)

            if not answer.find('"rc":0'):
                print(time.localtime(), "!ERROR processing packet: ", ''.join(msg),
                      file=sys.stderr)
        else:
            time.sleep(3.0)  # let it process then


########################################
def send_message(*in_msg) -> None:
    """
    Sends another message to the spawned mqtt agent

    :param in_msg: list of strings: parts of the message
    :return: None
    """

    # our standard sending tool expect either one-line json
    # or back-slash terminated multiline one
    msg = re.sub(r"([^\\])\n", "\\1\\\n", "".join(in_msg))

    send_message_raw(msg)


########################################
def send_long(topic, *msg) -> None:
    """
    Sends complex message to the mqtt agent

    :param topic: topic name
    :param msg: list of strings
    :return: None
    """
    global config
    
    # this should be a highly unique stuff really
    stop_word = config["stop word"] if "stop word" in config else "3%g3h@544/ujW^r}gj" 

    send_message_raw('{ "mpublish":"' + stop_word + '", "retain":true,' +
                     ' "topics":[ "' + topic + '" ] }\n' + ''.join(msg) + stop_word)


########################################
def send_short(topic, *msg) -> None:
    """
    Posts a (short) message to a single topic

    :param topic: str. topic name
    :param msg: str list
    :return: 
    """
    send_message('{ "publish":"', ''.join(msg), '", "retain":true, "topics":[ "', topic, '" ] }')


########################################
def get_mounts() -> None:
    """
    Collects linux mounted volumes information and put it into mounts[] list

    :return: None
    """
    global args, config, mounts, sender

    mf = open('/proc/mounts', 'r')

    while True:
        line = mf.readline()

        if len(line) == 0:
            break

        rm = re.match(r'^(\S+)\s+(\S+)\s+(\S+)\s+(.+)', line)  # /dev/X mount_point fs_type options

        mounts[rm.group(2)] = {'disk': rm.group(1), 'fstype': rm.group(3), 'options': rm.group(4)}

    mf.close()


########################################
def nested_keys_exists(in_hash, *keys) -> bool:
    """
    Will check if _all_ nested keys exists in dict

    :param in_hash: top-level dict
    :param keys: array of sub-keys to dive into
    :returns True if path is valid
    """
    sub_hash = in_hash

    for key in keys:
        if key not in sub_hash:
            return False

        sub_hash = sub_hash[key]

    return True


########################################
def process_sctl_json(sctl_output_text, ret, device_topic) -> bool:
    """
    This routine will parse the JSON formatted output from smartctl
    and will send processed stuff to the mqtt topics hierarchy (see top of file for explanation)
    NOTE: The combined state analysis will be posted in do_smartctl() final
    NOTE2: post_data is re-used to post large raw chunks of intermediate data to MQTT.
           E.g. attributes array if attributes_topic is configured

    :param sctl_output_text: raw smartctl output
    :param ret: returns the parsed data here - see do_smartctl for details
    :param device_topic: name of mqtt topics base for reports
    :return: bool: False if processing error were encountered
    """
    global args, config

    try:
        sctl_json = json.loads(sctl_output_text)
    except:
        return False

    if "model_name" not in sctl_json:
        ret["status"] = "smartctl returned incompete data"
        return False

    if sctl_json["json_format_version"][0] != 1 and sctl_json["json_format_version"][1] != 0:
        ret["warnings"].append("Newer smartctl report version!")
        ret["warnings count"] += 1

    ret["model"] = sctl_json["model_name"]
    ret["serial"] = sctl_json["serial_number"]
    ret["id"] = sctl_json["model_name"] + " " + sctl_json["serial_number"]

    model_flags = sctl_json["model_name"].replace(" ", "")
    if model_flags in config:
        model_flags = config[model_flags].replace(" ", "").split("|")
    else:
        model_flags = []

    if nested_keys_exists(sctl_json, "device", "type") and sctl_json["device"]["type"] == "nvme":
            ret["type"] = "NVMe"
    else:
        if ("trim" in sctl_json) and sctl_json["trim"]["supported"]:
            ret["type"] = "SSD"
        else:
            ret["type"] = "HDD"

    ret["temperature"] = int(sctl_json["temperature"]["current"]) if "temperature" in sctl_json else -1

    ret["power on time"] = int(sctl_json["power_on_time"]["hours"]) if "power_on_time" in sctl_json else -1

    sctl_attr_table = sctl_json["ata_smart_attributes"]["table"]

    if "attributes_topic" in config:  # we'll extract shorter attributes list for posting into separate topic
        post_data = []
    else:
        post_data = None

    for sctl_attr in sctl_attr_table:
        if post_data:
            post_data.append(sctl_attr["id"] + ':{ "name":"' + sctl_attr["name"]
                                             + '", "value":"' + str(sctl_attr["value"])
                                             + '", "raw":"' + sctl_attr["raw"]["string"] + '" }')

        if sctl_attr["id"] in val_less_than_threshold:  # check if value has crossed threshold
            if (val_less_than_threshold[sctl_attr["id"]] and sctl_attr["value"] < sctl_attr["thresh"]) \
               or (not val_less_than_threshold[sctl_attr["id"]] and sctl_attr["value"] > sctl_attr["thresh"]):

                err_or_warn_section = ""
                with sctl_attr["flags"] as flags:
                    if flags["prefailure"] or flags["error_rate"]:
                        err_or_warn_section = "errors"
                    elif flags["performance"] or flags["event_count"]:
                        err_or_warn_section = "warnings"

                msg = "Attribute's " + sctl_attr["name"] + " value (" + str(sctl_attr["value"]) \
                    + ") crossed threshold (" + str(sctl_attr["thresh"]) + ")"

                if "when_failed" in sctl_attr:
                    msg += " @ " + sctl_attr["when_failed"]

                if err_or_warn_section != "":
                    ret[err_or_warn_section].append(msg)
                    ret[err_or_warn_section + " count"] += 1

        # ----------------------------------------
        # Looking at the specific attributes here:

        # 190 Airflow_Temperature_Cel 0x0032   065   050   000    Old_age   Always       -       35
        if ret["temperature"] == -1 and (sctl_attr["id"] == 190 or sctl_attr["id"] == 194):
            ret["temperature"] = int(sctl_attr["value"])

        #  9 Power_On_Hours          0x0032   099   099   000    Old_age   Always       -       915 (222 63 0)
        # we'll use it to check if the tests are fresh enough
        elif ret["power on time"] == -1 and sctl_attr["id"] == 9:
            ret["power on time"] = int(sctl_attr["value"])

    if post_data:
        send_long(device_topic + '/' + config["attributes_topic"], "{\n", ",\n  ".join(post_data), "\n}")
        del sctl_json["ata_smart_attributes"]
    # End of attributes section

    # =============================================================
    # In this section we will check the error log for fresh entries

    if nested_keys_exists(sctl_json, "ata_smart_error_log", "summary", "logged_count") \
            and sctl_json["ata_smart_error_log"]["summary"]["logged_count"] > 0:

        if "error_log_topic" in config:  # we'll extract shorter attributes list for posting into separate topic
            post_data = []
        else:
            post_data = None

        for elog in sctl_json["ata_smart_error_log"]["summary"]["table"]:
            if ret["power on time"] < elog["lifetime_hours"] + int(config["max_error_nag_hours"]):
                err_or_warn_section = "errors"  # still fresh
            else:
                err_or_warn_section = "warnings"  # to not lose them at all

            msg = elog["error_description"] + " @ " + str(elog["lifetime_hours"])

            if "previous_commands" in elog:
                msg += ", CMD: " + elog["previous_commands"][0]["command_name"]

            ret[err_or_warn_section].append(msg)
            ret[err_or_warn_section + " count"] += 1

            if post_data:
                post_data.append(str(elog["lifetime_hours"]) + ':"'
                                 + elog["error_description"].replace('"', r'\"') + "}")

            if "previous_commands" in elog:
                msg += ", CMD: " + elog["previous_commands"][0]["command_name"]

    if post_data:
        send_long(device_topic + '/' + config["error_log_topic"], "{\n", ",\n  ".join(post_data), "\n}")
        del sctl_json["ata_smart_error_log"]

    # =============================================================
    #  In this section we check the tests log for problems
    if not nested_keys_exists(sctl_json, "ata_smart_self_test_log", "standard", "table"):
        if "no_tests_log" not in model_flags:
            ret["testing status"] = "NO tests were recorded! Or test logging is not supported."
        else:
            if ret["testing status"] == "":
                ret["testing status"] = "OK"
    else:
        if "tests_log_topic" in config:  # we'll extract shorter attributes list for posting into separate topic
            post_data = []
        else:
            post_data = None

        last_short_test_age = 0
        last_long_test_age = 0

        # to properly report unfinished tests we'll count only the latest (topmost)
        # Mark as True because it is reset on 1st passed,
        # and still we need to report first in list if it failed
        last_inconclusive = True

        for tlog in sctl_json["ata_smart_self_test_log"]["standard"]["table"]:
            ret["tests done"] += 1

            # test record may lack "passed" attribute if test has been interrupted.
            # we'll not count this at all, but report inconclusive if it is the latest one(s)
            if "passed" not in tlog["status"]:
                if tlog["type"]["value"] == 2:  # only long ones count
                    if last_inconclusive:
                        ret["tests inconclusive"] += 1
                continue
            else:
                last_inconclusive = False

            test_date = tlog["lifetime_hours"]

            if tlog["type"]["value"] == 1:  # Short offline
                if last_short_test_age < test_date:
                    last_short_test_age = test_date
            elif tlog["type"]["value"] == 2:  # Extended offline
                if last_long_test_age < test_date:
                    last_long_test_age = test_date

            if not tlog["status"]["passed"]:
                ret["testing status"] += tlog["status"]["string"] + " @ " + str(test_date) + "\n"
                ret["tests failed"] += 1

                if post_data:
                    post_data.append(str(test_date) + ':"'
                                     + tlog["status"]["string"].replace('"', r'\"') + '"')

        # we'll report short tests problems if there are problems with long test too
        short_tests_status = ""

        if "short_test_log_time" in model_flags:  # if test log time is stored as uint16
            lifetime = ret["power on time"] % 65536
        else:
            lifetime = ret["power on time"]

        if last_short_test_age == 0:
            short_tests_status = " and SHORT tests was NEVER run"
        else:
            if lifetime < last_short_test_age:  # happen if test's timestamps are wrapped
                # I know it's inaccurate and "broken clock show correct time twice a day",
                # but the best solution IMHO is to cache old results to see if there were any changes
                last_short_test_days = int(abs(lifetime - (65536 - last_short_test_age)) / 24)
            else:
                last_short_test_days = int((lifetime - last_short_test_age) / 24)

            if last_short_test_days > int(config["max_tests_age"]):
                short_tests_status = " and SHORT tests also didn't run for " + \
                                     str(last_short_test_days) + " days"

        if last_long_test_age == 0:
            if ret["tests inconclusive"] > 0:
                ret["testing status"] = "ALL LONG tests were unfinished" + short_tests_status
            else:
                ret["testing status"] = "LONG tests was NEVER run" + short_tests_status
        else:
            if lifetime < last_short_test_age:  # happen if test's timestamps are wrapped
                last_long_test_days = int(abs(lifetime - (65536 - last_long_test_age)) / 24)
            else:
                last_long_test_days = int((lifetime - last_long_test_age) / 24)

            if last_long_test_days > int(config["max_tests_age"]):
                ret["testing status"] = "LONG tests didn't run for " + str(last_long_test_days) \
                                        + " days" + short_tests_status

        if ret["testing status"] == "":
            ret["testing status"] = "OK"

        if post_data:
            send_long(device_topic + '/' + config["tests_log_topic"], "{\n", ",\n  ".join(post_data), "\n}")
            del sctl_json["ata_smart_error_log"]

    return True


########################################
def run_smartctl(device: str, *in_params) -> []:
    """
    Prepares smartctl arguments and runs it

    :param device: device. can be empty to run global queries
    :param in_params: list of parameters
    :return: ( 'results string', 'error message if any' )
    """
    global config

    # preparing smartctl parameters:
    params = [config["smartctl"]]
    params.extend(in_params)

    if device != '':
        # looking if there are specific smartctl switches to add
        for f in devices_cache[device]["scopts"]:
            params.append(f)

        params.append("/dev/" + device)

    sctl = subprocess.Popen(params, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, shell=False)

    if sctl.poll():
        ret = ''
        if sctl.returncode > 0:
            ret = 'smartctl error: ended with rc: ' + str(sctl.returncode)
            print(ret)
        return ('', ret)  # may be empty

    ret, err = sctl.communicate()  # communicate() will return all output at once
    sctl.terminate()

    return (ret, err)


########################################
def do_smartctl(device: str, device_topic: str) -> dict:
    """
    Collects data from smartctl. Run parser. Post basic data.

    :param device: path to the device file
    :param device_topic: root topic for this device
    :return: hash made by process_sctl_json() or other low-level data processor
    """
    global args, config

    ret = {  # pre-init and show what we want to get from smartctl
        "errors count": 0,    # total number of error conditions encountered
        "errors": [],         # array of detected errors as strings
        "id": "",             # unique id. model name + serial number
        "model": "",          # model name. if this is empty string then we had problems with json
        "power on time": -1,  # hours
        "serial": "",         # serial number
        "status": "",
        "temperature": -1,
        "testing status": "",  # a summary for testing procedures
        "tests done": 0,
        "tests failed": 0,
        "tests inconclusive": 0,  # some tests may have been interrupted and pass status is not available
        "type": "",           # "HDD" or "SSD" - loosely based on TRIM support and rotation speed
        "warnings count": 0,  # total number of warning conditions encountered
        "warnings": [],       # array of all warning conditions in string form
    }

    json_string, err = run_smartctl(device, '-a', '-j')

    if err != "":
        ret["status"] = ',"smartctl error":"' + err + "'"
        print(ret["status"])
        return ret

    json_string.replace("\r\n", "\n")  # Fix win EOL

    process_sctl_json(json_string, ret, device_topic)

    # send raw smart data. doing this anyway even if output is invalid, so it gets visible
    if "raw_smart_topic" in config:
        send_long(device_topic + "/" + config["raw_smart_topic"], json_string)

    if ret["status"] == "":
        ret["status"] = "OK"

    return ret


########################################
def check_storage_sd() -> None:
    """
    This function will:
    Make preparations like drives list and pre-flight.
    Calls configured data collector's drivin routine(s),
    Consolidates information about reported problems and posts to device's root topic

    Consult the beginning of this script for topics structure

    :return: None
    """
    global args, config, devices_cache

    detected_devices = {}

    #  for cygwin we can filter out real drives like this
    if sys.platform.startswith("cygwin"):
        partitions_file = open("/proc/partitions", newline="\n").read()
        for part in partitions_file.split("\n"):
            # major        minor        #blocks              name            win-mounts
            # 8            1            244196352            sda1            I:\
            rm = re.match(r"[\s\d]+(sd[a-z])\d+\s+([A-Z]:)", part)
            if rm:
                detected_devices[rm.group(1)] = rm.group(2)
            elif args.debug:
                print(rm.group(1), "- not mounted", file=sys.stderr)


    elif sys.platform.startswith("win"):  # win native python. very ununixy env
        dstr, err = run_smartctl('', '--scan')
        if err != '':
            print(err)
            return

        for line in dstr.splitlines():
            # /dev/sda -d ata  # /dev/sda, ATA device
            # /dev/sdd -d sat  # /dev/sdd [SAT], ATA device
            # /dev/sde -d scsi  # /dev/sde, SCSI device
            m = re.match(r'.dev.(sd.)\s+-d\s+(\S+)', line)
            device = m.group(1)
            type = m.group(2)

            # SCSI is a new USB now
            if type != 'ata' and type != 'sat':
                if args.debug:
                    print(device, " type is ", type, file=sys.stderr)
                continue

            detected_devices[device] = type

    else:  # hope its linux
        for device in os.listdir("/dev"):
            if not re.match("sd[a-z]$", device):
                continue

            # check if it is ata one. Currently, seen variants:
            #   onboard:    /devices/pci0000:00/0000:00:12.0/ata1/host0/target0:0:0/0:0:0:0/block/sda
            #   addon card: /devices/pci0000:00/0000:00:14.0/0000:02:00.0/ata3/host2/target2:0:0/2:0:0:0/block/sdc
            #   USB drive:  /devices/pci0000:00/0000:00:15.0/usb2/2-2/2-2:1.0/host4/target4:0:0/4:0:0:0/block/sde
            # NOTE: reading major # from /sys/class/block/sd?/dev being a tad untidy as I think,
            #       but I have no SCSI drives to look at.
            rm = re.search(r"/devices/pci.+/ata\d+/host\d+/", os.readlink("/sys/class/block/" + device))
            if not rm:
                if args.debug:
                    print(device, "- not an SCSI/ATA", file=sys.stderr)
                continue

            detected_devices[device] = '-'

    for device in detected_devices:
        if args.debug:
            print("+ device:", device, file=sys.stderr)

        device_topic = config["device_topic"].replace("$device", device)

        # we will count the configured checks to report if none were enabled actually
        checks_run = 0
        checks_with_errors = 0

        state = []  # we'll try to determine it by any test enabled
        severity = 0  # how bad troubles are. 0-OK, 1-warn, >1 - crit

        if device not in devices_cache:
            devices_cache[device] = dict()

        dc = devices_cache[device]

        # looking if there are specific model options
        if "model flags" not in dc:  # retrieving
            dc["model flags"] = []  # misc flags
            dc["scopts"] = []       # smartctl options if any

            try:
                dc["model"] = open("/sys/block/" + device + "/device/model").readline()
                m = dc["model"].replace(" ", "")

                if m in config:
                    for f in config[m].split("|"):
                        if f[1:6] == "scopt=":
                            dc["scopts"].append(f[7:])
                        else:
                            dc["model flags"].append(f)
            except FileNotFoundError:  # win/cygwin has no /sys
                dc["model"] = "_"

        # doing nagios's check_ide_smart run if configured. it is really simple.
        if "check_ide_smart" in config:
            checks_run += 1
            params = shlex.split(config["check_ide_smart"])
            params.append("/dev/" + device)
            cis = subprocess.Popen(params, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

            st, err = cis.communicate()  # communicate will slurp output and close pipe
            st = re.sub("^OK .*", "OK", st.rstrip())  # strip out clutter

            if st != "OK" or err != "":
                checks_with_errors += 1
                state.append(st + "(" + err + ")")
                severity += 1

        # doing smartctl run if configured
        if "smartctl" in config:
            checks_run += 1
            sctl_data = do_smartctl(device, device_topic)

            if sctl_data["model"] == "UNKNOWN":
                if args.debug:
                    print("! smartctl failed to fetch data for:", device, file=sys.stderr)

                continue

            if sctl_data["testing status"] != "OK":  # failed or not running tests detected
                checks_with_errors += 1
                severity += 1

                state.append("testing status: " + sctl_data["testing status"])

            msg = json.dumps(sctl_data, skipkeys=True, separators=(',\n', ': '))

            if sctl_data["errors count"] > 0:
                state.append("Has " + str(sctl_data["errors count"]) + " current errors!")
                severity += sctl_data["errors count"] + 1

            if sctl_data["warnings count"] > 0:
                state.append("Has " + str(sctl_data["warnings count"]) + " current warnings.")
                severity += sctl_data["warnings count"] / 2

            if sctl_data["tests failed"] > 0:
                state.append(str(sctl_data["tests failed"]) + " of " + str(sctl_data["tests done"])
                             + " recent tests failed!")
                severity += 1

            if sctl_data["tests inconclusive"] > 0:
                state.append(str(sctl_data["tests inconclusive"]) + " latest tests were not finished!")
                severity += 0.2

            if sctl_data["status"] != "OK":  # e.g. some value went below threshold - pre-fail state at least
                state.append(sctl_data["status"])
                severity += 2

            send_long(device_topic, msg)

            send_short(device_topic + "/" + config["temperature_topic"], str(sctl_data["temperature"]))

        if checks_run > 0:  # so we got something meaningful to report here
            if severity == 0:
                st = "OK"
            else:
                st = ("WARNING: " if severity < 2 else "CRITICAL: ") + ", ".join(state).replace('"', r'\"')

            send_short(device_topic + "/" + config["state_topic"], st)

            send_short(device_topic + "/" + config['updated_topic'], dates_json)


# end loop: for device in os.listdir( "/dev" ):

########################################
def check_storage() -> None:
    """
    Calls all lower level functions that checks various properties of hardware and software
    :return: None
    """
    check_storage_sd()  # do low-level first


####################################################
def set_config_default(key: str, val) -> None:
    """
    Initializes defaults in config

    :param key: key to look for
    :param val: default value to set
    :return: None
    """
    global config

    if key not in config:
        config[key] = str(val)


####################################################
global config_full, dates_json, root_topic, sender

# This is the list of known attributes where warning should be produced on val exceed threshold
# True when val < thresh is bad, False when val > threshold is bad
val_less_than_threshold = {
    "1": True, "2": False, "3": True, "5": True, "8": False,
    "10": True, "11": True, "13": True, "22": False,
    "181": True, "183": True, "184": True, "187": True, "188": True, "189": True,
    "191": True, "192": True, "193": True, "194": True, "196": True, "197": True, "198": True, "199": True,
    "200": True, "201": True, "202": True, "203": True, "204": True, "205": True, "207": True,
    "220": True, "221": True, "227": True, "228": True, "250": True, "254": True
}

config_path = "/etc/smarthome/reporters/reporters.ini"  # default

####################################################

parser = argparse.ArgumentParser(
    description="Collect state info from the storage and post it to mqtt.\n"
                "V2.010. Copyright (c) 2022+ by Andrej Pakhutin")
parser.add_argument("-c", "--config", dest="config_path", action="store", default=config_path,
                    help="path to a non-default (" + config_path + ") config file")
parser.add_argument("-d", "--debug", dest="debug", action="store_true", default=False, help="debug mode")
parser.add_argument("-l", "--loop", dest="loop", action="store", type=int, default=0,
                    help="Loop forever, sleeping <int> seconds between passes")
parser.add_argument("action", nargs="?", default="", help="non-default action name to run")

args = parser.parse_args()

load_config(args.config_path, '/etc/smarthome/reporters/')
config = config_full['storage']

hba = socket.gethostbyaddr(socket.gethostname())
hostname = re.sub(r"\..+", "", hba[0])

# mqtt sender script tend to hang up (why no SIGPIPE on stdin read?) if we exit hastily.
signal.signal(signal.SIGINT, handle_termination)
signal.signal(signal.SIGTERM, handle_termination)

spawn_sender()

queue = []
mounts = dict()
devices_cache = dict()

if args.action != "":
    queue.append(args.action)
else:
    queue = [check_storage]

#  Set some defaults:
set_config_default("max_error_nag_hours", 24 * 10)
set_config_default("max_inactivity", 10 * 60)
set_config_default("max_tests_age", 7 * 24)

while True:
    dates_json = '{ "date":"' + time.ctime() + '", "timestamp":' + str(int(time.time())) + ' }'
    dates_json = dates_json.replace(r'"', r'\"')

    for func in queue:
        if sender.poll():
            if sender.returncode > 0:
                print("? NOTE:", sender.args, "exited abnormally with rc:", sender.returncode, file=sys.stderr)
                spawn_sender()
        func()

    if args.loop == 0:
        break

    time.sleep(args.loop)

sender.communicate(input="\n\n" + '{ "cmd":"exit" }' + "\n")

try:
    sender.wait(timeout=5.0)
except:
    pass

sender.terminate()

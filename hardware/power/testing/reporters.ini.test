; NOTE: program uses extended interpolation, so mask your '$' character with double '$$'
[DEFAULT]
; here we post json like: { "date":"Mon Sep 28 12:45:55 2020", "timestamp":1601286355 }
updated_topic = updated

; the following are paths relative to device_topic:
; nagios-like status, e.g. from check_ide_smart for /dev/sdX
state_topic = state

;====================================
[power]
; for debugging. use our mqtt-tool or another agent that understand json input
sender = cat

upsc_binary = cat test_strings.txt

; Here is sample hieararchy that I use in my smarthome setup
;power
;     <dev_id> - json with other data goes here
;         ctl... - if you need some control
;         batt_charge - battery charge level
;         in_volts - input voltage
;         out_load - ups load in percent
;         state - OL, BOOST, etc...
;         type - device type (e.g. "ups")
;         updated - { "date":"human readable date", "timestamp":unix_timestamp, checks stats }

; root for all topics.
root_topic = hw/power

; uncomment and supply your space-separated list if you don't want to rely on upsc -l output
devices = main

; device's root topic. $$device will be substituted by the currently examined device's name
device_topic = ${root_topic}/$$device

; NOTE: Replace all '.' with '_' in attributes names! Reported data will be processed in this way.

; attribute to sub-topic name map. Data associated with these attributes wiil be posted directly to mapped topic.
; use space-separated attr:topic pairs
one_to_one = device_type:type 
  battery_charge:batt_charge
  input_voltage:in_volt
  ups_load:out_load

; these attributes will be included into combined report to device_topic
; under the "attributes"{} json section.
; separate by space, multiline allowed.
; NOTE that device_mfr,  device_model,  device_type and  ups_status will be included always
bulk_report = battery_charge
  battery_runtime
  input_voltage
  input_current
  input_frequency
  input_load
  input_power
  output_voltage
  output_frequency
  output_current
  ups_alarm
  ups_load
  ups_power
  ups_power_nominal

; --------------------
; this section is about what and how frequent to report
; your country's standard voltage,tolerance percentage
standard_v = 220,10
; frequency,tolerance percentage
standard_freq = 50,4

; get actual reading every N seconds. Use -l or --loop switches to override
; loop disabled if value is <= 0
sample_interval = 10

; comment if you don't need to log raw samples into the big big file
log_samples = /var/log/smarthome/ups-$$device.log
log_items = input_voltage
  voltage_mean_minute
  frequency_mean_minute
  battery_charge
  ups_status

; push data to sender every N seconds
report_interval = 30

; You can add device-specific config parts with a new section with [power.NUT_ID] name:
[power.main]
; If there is no vendor report for your model,
; use .attribute = value here to fake it
.mfr = Powerwalker
.model = VFI 2000CRM LCD


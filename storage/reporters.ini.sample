; NOTE: program uses extended interpolation, so mask your '$' character with double '$$'
[DEFAULT]
; here we post json like: { "date":"Mon Sep 28 12:45:55 2020", "timestamp":1601286355 }
updated_topic = updated

; the following are paths relative to device_topic:
; nagios-like status, e.g. from check_ide_smart for /dev/sdX
state_topic = state

;====================================
[storage]
; The program that will actually deliver the data to the end-point like MQTT broker
;sender = /etc/smarthome/mqtt/mqtt --stdin --quiet storage-reports
;sender = /etc/smarthome/mqtt/mqtt --stdin storage-reports
sender = /bin/cat

; section for storage status reporter.
;check_ide_smart = /usr/lib64/nagios/plugins/check_ide_smart
; Specify full path and name of smartctl w/o parameters
smartctl = /usr/sbin/smartctl

; root for all topics.
; ! Change <HOST> to reflect your host name or whatever
root_topic = sys/<HOST>/hw/storage

; device's root topic.
; The special macro: '$$device' will be substituted with the device's name without /dev/ prefix
device_topic = ${root_topic}/$$device

temperature_topic = temperature

; comment these out if you do not want to get specific topic filled with raw S.M.A.R.T data
;attributes_topic = attributes
;error_log_topic = errors
;raw_smart_topic = raw_smart
;tests_log_topic = tests

; how many hours to include new entries from error log into status message ( default is 10 days = 240 hours )
;max_error_nag_hours = 240

; warn if test were not done for this amount of hours ( default is 7 days = 168 hours )
;max_tests_age = 168

; if your controller is weird or just USB to ATA, then you may want to provide
; some additional options to smartctl like this:
<modelname> = <option>[|<option>]... - additional model-specific options
;             look up model name in /sys/block/sd?/device/model. Spaces will be removed on lookup!
;             To specify additional smartctl parameter,
;             use 'scopt=<single smartctl option>' syntax

; This is individual drive model settings:
; The format of key name is drive model, as reported by smartctl, but without spaces
; The flags in list should be separated by the pipe "|" symbol:
;    no_tests_log - if you have the drive like intel 520 series that does not provide tests log at all
;    short_test_log_time - Spotted on my WD AV-GP: When lifetime in test log is 2byte
;                          and reported as remainder of "Power On hours" division by 65536
;                          This will produce some mild warnings sometimes, instead of "no tests run for year".

INTELSSDSC2CW120A3 = no_tests_log
WDCWD30EURS-63SPKY0 = short_test_log_time

;====================================
[power]
;sender = ${DEFAULT:sender} --debug --clientid karazhan-power-reports reporters
sender = ${DEFAULT:sender} --clientid karazhan-power-reports reporters
;sender = /usr/bin/cat
;power
;     <dev_id>
;         ctl...
;         batt_charge
;         in_volts
;         out_load
;         state
;         type
;         updated

; root for all topics.
root_topic = hw/power

devices = eaton1500

; device's root topic. $$device will be substituted by the device name
device_topic = ${root_topic}/main

; NOTE: replace all '.' with '_'! Reported attribute names will be processed in this way

; attribute to sub-topic name map to post directly. space-separated attr:topic pairs
one_to_one = device_type:type
  battery_charge:batt_charge
  input_voltage:in_volts
  ups_load:out_load

; these attributes will be included into report to device_topic under the "attributes"{} json section
; separate by space, multiline allowed
; NOTE that device_mfr,  device_model,  device_type and  ups_status will be included always
bulk_report = battery_charge
  battery_runtime
  input_voltage
  input_frequency
  output_voltage
  output_frequency
  ups_load
  ups_power_nominal

; --------------------
; this section is about what and how frequent to report
; your country's standard voltage,frequency and tolerance percentages
standard_v = 220,10
standard_freq = 50,4

; get reading every N seconds
sample_interval = 5

; comment if you don't need to log raw samples
;log_samples = /var/log/smarthome/$$device.log
log_items = input_voltage
  voltage_mean_minute
  frequency_mean_minute
  battery_charge
  ups_status

; report data to server every N seconds
report_interval = 30
